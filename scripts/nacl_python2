#!/bin/bash

DIR="$(dirname $BASH_SOURCE[0])"
RUN_ARGS=()
ARGS=("$@")

# Implement some special handling for the options:
#   -R mounts the sandbox root as read-only
#   -h prints the flag above on top of the usual help.

# Scan options recognized by python (we only need to list those that take an argument).
while getopts ":W:Q:m:c:" opt "${ARGS[@]}" -- ; do
  case "$OPTARG" in
    R)
      RUN_ARGS+=(-R)
      OPTIND=$((OPTIND-1))
      ARGS=("${ARGS[@]:0:$((OPTIND-1))}" "${ARGS[@]:$OPTIND}")
      ;;
    h)
      echo "OVERRIDDEN OPTIONS"
      echo "-R     : expose the sandbox root directory to Python as read-only"
      echo
      ;;
  esac
done


if [[ ${#ARGS[@]} -eq 0 ]]; then
  # Sandboxed python doesn't detect if it has a tty, so if called without arguments (for
  # interactive REPL), add an explicit flag to make it interactive.
  ARGS=(-i)
fi

exec $DIR/run "${RUN_ARGS[@]}" /python/bin/python2.7.nexe "${ARGS[@]}"
