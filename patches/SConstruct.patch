# Workaround for only having XCode command-line tools without full SDK (which is fine).
diff --git a/SConstruct b/SConstruct
index f09839f..210d28e 100755
--- a/SConstruct
+++ b/SConstruct
@@ -2395,28 +2395,34 @@ def MakeMacEnv(platform=None):
   # For no good reason, this all gets instantiated on every platform,
   # and then only actually used on Mac.  But the find_sdk.py script
   # will barf if run on a non-Mac.
+  isysroot = []
   if pynacl.platform.IsMac():
     # mac_sdk_min must be kept in synch with mac_sdk_min in
     # chromium/src/build/config/mac/mac_sdk.gni.
     mac_sdk_min = '10.10'
     # Find the Mac SDK to use as sysroot.
     # This invocation matches the model in //build/config/mac/mac_sdk.gni.
-    mac_sdk_sysroot, mac_sdk_version = subprocess.check_output([
+    p = subprocess.Popen([
         sys.executable,
         os.path.join(os.path.pardir, 'build', 'mac', 'find_sdk.py'),
         '--print_sdk_path',
         mac_sdk_min
-        ]).splitlines()
+        ], stderr=subprocess.PIPE)
+    stdout, stderr = p.communicate()
+    if p.returncode == 0:
+      mac_sdk_sysroot, mac_sdk_version = stdout.splitlines()
+      isysroot = ['-isysroot', mac_sdk_sysroot]
+    else:
+      print "No Mac SDK found, will try to proceed without"
   else:
-    mac_sdk_sysroot = 'ThisIsNotAMac'
+    print "This is not a Mac, but will try to proceed"
 
   # This should be kept in synch with mac_deployment_target
   # in build/common.gypi, which in turn should be kept in synch
   # with chromium/src/build/common.gypi.
   mac_deployment_target = '10.6'
 
-  sdk_flags = ['-isysroot', mac_sdk_sysroot,
-               '-mmacosx-version-min=' + mac_deployment_target]
+  sdk_flags = isysroot + ['-mmacosx-version-min=' + mac_deployment_target]
   mac_env.Append(CCFLAGS=sdk_flags, ASFLAGS=sdk_flags, LINKFLAGS=sdk_flags)
 
   subarch_flag = '-m%s' % mac_env['BUILD_SUBARCH']
